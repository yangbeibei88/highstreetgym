{"version":3,"file":"src_components_AdminTimetableSearchAndFilter_js.bundle.js","mappings":";;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAFA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC9HA;AACA;AAQA;AANA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AAmBA;AAyDA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;ACjJA;AAAA;AACA;AAEA;AAAA;AAEA;AAIA;AAAA;AACA","sources":["webpack://hsg_frontend/./src/components/AdminTimetableSearchAndFilter.js","webpack://hsg_frontend/./src/components/FnPagination.js","webpack://hsg_frontend/./src/components/HTMLTemplate.js"],"sourcesContent":["import { Pagination } from \"./FnPagination.js\";\nimport { rowHtml } from \"./HTMLTemplate.js\";\n\nexport class AdminTimetableSearchAndFilter {\n  constructor() {\n    this._ttSearchAndFilterEl = document.getElementById(\n      \"manageTimetableFilters\",\n    );\n    this._classFilterEl = document.querySelector(\n      \"#manageTimetableFilters #classFilter\",\n    );\n    this._statusEl = document.querySelector(\n      \"#manageTimetableFilters #statusFilter\",\n    );\n    this._timetableList = document.querySelector(\n      \"table#adminTimetableList tbody\",\n    );\n    this._paginationContainer = document.querySelector(\n      \"#pagination-container-admin-timetable\",\n    );\n    this.pagination = null;\n    if (!this._ttSearchAndFilterEl || !this._timetableList) {\n      return;\n    }\n    this.handleSearchFilter();\n    this.initializeListeners();\n  }\n\n  initializeListeners() {\n    this._classFilterEl.addEventListener(\"change\", () =>\n      this.handleSearchFilter(),\n    );\n    this._statusEl.addEventListener(\"change\", () => this.handleSearchFilter());\n  }\n\n  buildQuery(page = 1, limit = 10) {\n    const classFilter = this._classFilterEl.value;\n    const statusFilter = this._statusEl.value;\n\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    return new URLSearchParams({\n      classId: classFilter || \"\",\n      status: statusFilter || \"active\",\n      page,\n      limit,\n    }).toString();\n  }\n\n  async fetchTimetables(query) {\n    try {\n      const res = await fetch(\n        `/auth/admin/manage-timetable/search-filter?${query}`,\n      );\n      const data = await res.json();\n      this.updateTimetableList(data.timetables);\n      // console.log(data.timetables);\n      this.updatePagination(data.pagination);\n    } catch (error) {\n      console.error(`Fetch timetable error: `, error);\n    }\n  }\n\n  handleSearchFilter(page = 1) {\n    const query = this.buildQuery(page);\n    this.fetchTimetables(query);\n  }\n\n  editButtonHtml(timetableId) {\n    return `<a href=\"/auth/admin/timetableForm/${timetableId}/edit\" class=\"btn btn-sm btn-limeGreen\">\n        Edit\n      </a>`;\n  }\n\n  updateTimetableList(timetables) {\n    this._timetableList.innerHTML = \"\";\n\n    if (timetables.length === 0) {\n      const row = document.createElement(\"tr\");\n      const noDataCell = document.createElement(\"td\");\n      noDataCell.colSpan = 10;\n      noDataCell.textContent = \"No timetable found.\";\n      row.appendChild(noDataCell);\n      this._timetableList.appendChild(row);\n      return;\n    }\n\n    timetables.forEach((item) => {\n      const row = document.createElement(\"tr\");\n      row.innerHTML = `\n      ${rowHtml(\"NO#\", item.timetableNo)}\n      ${rowHtml(\"class\", item.className)}\n      ${rowHtml(\"date\", new Date(item.startDateTime).toLocaleString())}\n      ${rowHtml(\"duration\", item.duration)}\n      ${rowHtml(\"trainer\", item.trainerFirstName)}\n      ${rowHtml(\"level\", item.level)}\n      ${rowHtml(\"capacity\", item.capacity)}\n      ${rowHtml(\"availability\", item.availability)}\n      ${rowHtml(\"status\", new Date(item.startDateTime) < Date.now() ? \"finished\" : \"active\")}\n      ${rowHtml(\"edit\", this.editButtonHtml(item.timetableId))}\n      `;\n\n      this._timetableList.appendChild(row);\n    });\n  }\n\n  updatePagination(paginationData) {\n    // console.log(\"Fontend Pagination Data:\", paginationData);\n\n    // RE-NITIALIZE PAGINATION EVERYTIME NEW DATA IS FETCHED, OTHERWISE, THE PAGINATION NUMBERS WILL STAY AT THE FIRST TIME!\n    if (this.pagination) {\n      this._paginationContainer.innerHTML = \"\";\n    }\n\n    this.pagination = new Pagination({\n      currentPage: paginationData.currentPage,\n      totalPages: paginationData.totalPages,\n      totalItems: paginationData.totalItems,\n      limit: paginationData.limit,\n      onPageChange: (page) => {\n        this.handleSearchFilter(page);\n      },\n      paginationContainer: \"#pagination-container-admin-timetable\",\n      captionContainer: \"table#adminTimetableList caption\",\n    });\n\n    this.pagination.render();\n  }\n}\n","export class Pagination {\n  constructor({\n    currentPage,\n    totalPages,\n    totalItems,\n    limit,\n    onPageChange,\n    paginationContainer,\n    captionContainer = \"\",\n  }) {\n    // console.log(\"Pagination Constructor:\", {\n    //   currentPage,\n    //   totalPages,\n    //   totalItems,\n    //   limit,\n    // });\n    this.currentPage = currentPage;\n    this.totalPages = totalPages;\n    this.totalItems = totalItems;\n    this.limit = limit;\n    this.onPageChange = onPageChange;\n    this._paginationContainer = document.querySelector(paginationContainer);\n    this._captionContainer = document.querySelector(captionContainer);\n  }\n\n  render() {\n    const startIndex =\n      this.totalItems > 0 ? (this.currentPage - 1) * this.limit + 1 : 0;\n    const endIndex = Math.min(this.currentPage * this.limit, this.totalItems);\n\n    const captionHtml = `\n        <!-- Showing X to Y of Z Entries -->\n      <span class=\"text-sm text-center text-darkCyan\">\n        Showing\n        <span class=\"font-semibold\">\n          ${startIndex}\n        </span>\n        to\n        <span class=\"font-semibold\">\n          ${endIndex}\n        </span>\n        of\n        <span class=\"font-semibold\">\n          ${this.totalItems}\n        </span>\n        Entries\n      </span>\n    `;\n\n    const paginationHtml = `<div class=\"block py-4\">\n    <div class=\"flex flex-col items-center justify-center md:flex-row md:justify-between\">\n    <!-- Showing X to Y of Z Entries -->\n      <span class=\"text-sm text-center text-darkCyan\">\n        Showing\n        <span class=\"font-semibold\">\n          ${startIndex}\n        </span>\n        to\n        <span class=\"font-semibold\">\n          ${endIndex}\n        </span>\n        of\n        <span class=\"font-semibold\">\n          ${this.totalItems}\n        </span>\n        Entries\n      </span>\n  \n      <!-- Pagination Controls -->\n      <nav aria-label=\"page navigation\">\n        <ul class=\"flex flex-wrap items-center -space-x-px h-8 text-sm\">\n          <!-- First Button -->\n          <li>\n            <a href=\"#\" data-page=\"1\" class=\"flex items-center justify-center px-3 h-8 ms-0 leading-tight text-darkCyan bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-limeGreen ${this.currentPage === 1 ? \"cursor-not-allowed opacity-50\" : \"\"}\">\n              &laquo;&laquo; First\n            </a>\n          </li>\n  \n          <!-- Previous Button -->\n          <li>\n            <a href=\"#\" data-page=\"${this.currentPage - 1}\" class=\"flex items-center justify-center px-3 h-8 ms-0 leading-tight text-darkCyan bg-white border border-e-0 border-gray-300 hover:bg-limeGreen ${this.currentPage === 1 ? \"cursor-not-allowed opacity-50\" : \"\"}\">\n              &laquo; Prev\n            </a>\n          </li>\n  \n          <!-- Numbered Pages -->\n          ${this.renderPageNumbers()}\n  \n          <!-- Next Button -->\n          <li>\n            <a href=\"#\" data-page=\"${this.currentPage + 1}\" class=\"flex items-center justify-center px-3 h-8 leading-tight text-darkCyan bg-white border border-gray-300 hover:bg-limeGreen ${this.currentPage === this.totalPages || !this.totalPages ? \"cursor-not-allowed opacity-50\" : \"\"}\">\n              Next &raquo;\n            </a>\n          </li>\n  \n          <!-- Last Button -->\n          <li>\n            <a href=\"#\" data-page=\"${this.totalPages}\" class=\"flex items-center justify-center px-3 h-8 leading-tight text-darkCyan bg-white border border-gray-300 rounded-e-lg hover:bg-limeGreen ${this.currentPage === this.totalPages || !this.totalPages ? \"cursor-not-allowed opacity-50\" : \"\"}\">\n              Last &raquo;&raquo;\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  </div >`;\n\n    this._paginationContainer.innerHTML = paginationHtml;\n    this._captionContainer.innerHTML = captionHtml;\n\n    this.attachListeners();\n  }\n\n  renderPageNumbers() {\n    let pageNumbersHtml = \"\";\n    // eslint-disable-next-line no-plusplus\n    for (let i = 1; i <= this.totalPages; i++) {\n      pageNumbersHtml += `\n        <li>\n          <a href=\"#\" data-page=\"${i}\" class=\"flex items-center justify-center px-3 h-8 leading-tight text-darkCyan border border-gray-300 hover:bg-limeGreen ${this.currentPage === i ? \"bg-limeGreen\" : \"bg-white\"}\">${i}</a>\n        </li>\n      `;\n    }\n\n    return pageNumbersHtml;\n  }\n\n  attachListeners() {\n    const pageLinks =\n      this._paginationContainer.querySelectorAll(\"a[data-page]\");\n\n    pageLinks.forEach((link) => {\n      link.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        const page = parseInt(link.getAttribute(\"data-page\"), 10);\n\n        if (page >= 1 && page <= this.totalPages && page !== this.currentPage) {\n          this.onPageChange(page);\n        }\n      });\n    });\n  }\n\n  update(currentPage) {\n    this.currentPage = currentPage;\n    this.render();\n  }\n}\n","export const rowHtml = (field, value) =>\n  `<td data-cell=${field} class='grid grid-cols-2 before:content-[attr(data-cell)] before:uppercase before:font-semibold md:text-center md:table-cell md:before:content-none'>${value}</td>`;\n\nexport const linkHtml = (text, path) => `\n        <a href=\"${path}\" class=\"text-sm text-darkCyan underline underline-offset-2 decoration-dotted hover:brightness-125 hover:decoration-solid\">\n      ${text}\n    </a>\n    `;\n\nexport const avatarHtml = (path, alt) => `\n  <img class=\"size-10 rounded-full\" src=${path} alt=${alt} />\n`;\n"],"names":[],"sourceRoot":""}